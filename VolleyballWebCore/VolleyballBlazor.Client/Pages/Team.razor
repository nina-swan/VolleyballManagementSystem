@page "/team/{Id:int}"
@inject ITeamService teamService
@inject IDiscussionService discussionService
@inject IMatchService matchService

<div class="text-center">
    @if (TeamData != null)
    {
        <div>
            @if (TeamData.Photo != null)
            {
                <BigImage Image="@TeamData.Photo"></BigImage>
            }
        </div>
        <h2>@TeamData.Name</h2>
        <div class="d-flex flex-row flex-wrap justify-content-center">

            <div class="mr-3 d-flex justify-content-center align-items-center">
                @if (TeamData.Logo != null)
                {
                    <TeamLogo SizePx="200" Image="@TeamData.Logo"></TeamLogo>
                }
                else
                {
                    <img src="/images/user.png">
                }

            </div>
            <div class="p-2 card table-responsive" style="max-width:580px">
                <div class="card-header">
                    Zawodnicy
                </div>
                <div class="table-responsive">
                    <table class="table text-left">
                        <thead>
                            <tr>
                                <th>LP:</th>
                                <th>Imię i nazwisko</th>
                                <th>Numer</th>
                                <th>Wzrost</th>
                                <th>Pozycja</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>1</td>
                                <td>
                                    <NavLink href=@{
                                         "/user-profile/" + TeamData.Captain.Id
                                         }><b>@TeamData.Captain.FirstName @TeamData.Captain.LastName (K)</b></NavLink>
                                </td>
                                <td>@TeamData.Captain.JerseyNumber</td>
                                <td>@TeamData.Captain.Height</td>
                                <td>@TeamData.Captain.PositionName</td>
                            </tr>
                            @foreach (var player in TeamData.Players)
                            {

                                <tr>
                                    <td>@(++i)</td>
                                    <td>
                                        <NavLink href=@{
                                         "/user-profile/" + player.Id
                                         }>@player.FirstName @player.LastName</NavLink>
                                    </td>
                                    <td>@(player.JerseyNumber.HasValue ? player.JerseyNumber : "?")</td>
                                    <td>@(player.Height.HasValue ? player.Height : "?")</td>
                                    <td>@player.PositionName</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>


        <div class="p-2 card mt-4 mb-5 table-responsive">
            <div class="card-header">
                Informacje o drużynie
            </div>
            <table class="table text-left">
                <tbody>
                    <tr>
                        <td><b>Nazwa</b></td>
                        <td>@TeamData.Name</td>
                    </tr>
                    <tr>
                        <td><b>Strona www</b></td>
                        <td><a href="@TeamData.Website">@TeamData.Website</a></td>
                    </tr>
                    <tr>
                        <td><b>Opis</b></td>
                        <td>@TeamData.TeamDescription</td>
                    </tr>
                </tbody>
            </table>

        </div>


        <div class="p-2 card mt-4 mb-5 table-responsive-lg">
            <div class="card-header">
                Historia meczów
            </div>
            <div class="form-group row p-5">
                <label for="season">Sezon:</label>
                <select class="form-control" id="season" @onchange="UpdateSeason">
                    @if (Seasons == null)
                    {
                        <option value="null" disabled>Ładowanie sezonów...</option>
                    }
                    else
                    {
                        @foreach (SeasonDto season in Seasons)
                        {
                            <option value="@season.Id">@season.Name</option>
                        }
                    }

                </select>
            </div>
            <table class="table text-left" style="max-width:800px">
                <thead>
                    <tr>
                        <th>Termin</th>
                        <th>Gospodarz</th>
                        <th>Wynik</th>
                        <th>Gość</th>
                        <th>Miejsce</th>
                        <th>Kolejka</th>
                        <th>Sędzia</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Games != null)
                    {
                        @foreach (var game in Games)
                        {
                            <tr>
                                <td>
                                    <NavLink href=@{
                                 "/match/" + game.Id
                                 }>@game.Schedule</NavLink>
                                </td>
                                <td>
                                    <NavLink href=@{
                                 "/team/" + game.HomeTeam.Id
                                 }>@game.HomeTeam.Name</NavLink>
                                </td>
                                <td>@game.Team1Score : @game.Team2Score</td>
                                <td>
                                    <NavLink href=@{
                                 "/team/" + game.GuestTeam.Id
                                 }>@game.GuestTeam.Name</NavLink>
                                </td>
                                <td>@game.VenueName</td>
                                <td>@game.RoundName</td>
                                <td>
                                    <NavLink href=@{
                                 "/user-profile/" + game.Referee.Id
                                 }>@game.Referee.FirstName @game.Referee.LastName</NavLink>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>



        <div class="text-left">
            <h4>Komentarze</h4>
            @if (CommentsErrorMessage != "")
            {
                <div class="alert alert-danger" role="alert">
                    <b>Nie udało się załadować komentarzy:</b> @CommentsErrorMessage
                </div>
            }

            <Pagination Items="TeamComments" PageSize="5">
                <ItemTemplate>
                    <div class="flex-row d-flex mb-4">
                        <div>
                            @if (@context.Author.Photo != null)
                            {
                                <TeamLogo Logo="@context.Author.Photo" SizePx="70" />
                            }
                            else
                            {
                                <img class="img-thumbnail" style="width: 70px" src="/images/user.png">
                            }

                        </div>
                        <div class="mr-3"></div>
                        <div>
                            <small>
                                @context.CreationDate przez <NavLink href=@{
                                                                 "/user-profile/" + @context.Author.Id
                                                                 }>@context.Author.FirstName @context.Author.LastName</NavLink>
                            </small>
                            <p>@context.Content</p>
                        </div>
                    </div>
                </ItemTemplate>
            </Pagination>

            <AuthorizeView Context="authContext">
                <Authorized>
                    <div class="mb-4">
                        <EditForm Model="@commentModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label class="row-form-label" for="Comment">Dodaj komentarz:</label>
                                <InputTextArea class="form-control" id="Comment" @bind-Value="commentModel.Content" />
                                <ValidationMessage class="text-danger" For="@(() => commentModel.Content)" />
                            </div>
                            <p class="text-danger">@NewCommentError</p>
                            @if (SubmitLoading)
                            {
                                <LoadingIcon />
                            }
                            else
                            {
                                <button type="submit" class="btn btn-primary">Dodaj</button>
                            }
                        </EditForm>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    }
    else
    {
        @if (ErrorMessage != "")
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }
        else
        {
            <LoadingIcon></LoadingIcon>
        }
    }
</div>




@code {
    private int i = 1;

    public string ErrorMessage { get; set; } = "";

    public string CommentsErrorMessage { get; set; } = "";

    [Parameter]
    public int Id { get; set; }

    public TeamDto? TeamData { get; set; }

    public List<CommentDto> TeamComments { get; set; } = new List<CommentDto>();

    public List<SeasonDto>? Seasons { get; set; }

    public NewCommentDto commentModel { get; set; } = new NewCommentDto();

    public List<MatchSummaryDto>? Games { get; set; }

    public bool SubmitLoading { get; set; } = false;

    public string NewCommentError { get; set; } = "";

    protected override async void OnInitialized()
    {
        TeamData = await GetTeamProfile();

        Seasons = await GetSeasons();

        if (Seasons.Count > 0)
        {
            UpdateSeason(Seasons.First().Id);
        }

        await DownloadComments();

        commentModel = new NewCommentDto()
            {
                ContentLocationId = Id,
            };


        StateHasChanged();
    }

    public async Task DownloadComments()
    {
        var commentsResponse = await discussionService.GetTeamComments(Id);

        if (commentsResponse.Success)
        {
            TeamComments = commentsResponse.Data!;
        }
        else
        {
            CommentsErrorMessage = commentsResponse.Message;
        }
    }



    private async Task HandleValidSubmit()
    {
        NewCommentError = "";
        SubmitLoading = true;
        var result = await discussionService.AddTeamComment(commentModel);
        SubmitLoading = false;
        if (result.Success)
        {
            commentModel.Content = "";
            await DownloadComments();
        }
        else
        {
            NewCommentError = result.Message;
        }
    }

    public async Task<TeamDto?> GetTeamProfile()
    {
        var teamResponse = await teamService.GetTeam(Id);

        if (teamResponse.Success)
        {
            return teamResponse.Data;
        }
        else
        {
            ErrorMessage = teamResponse.Message;
            return null;
        }
    }



    private void UpdateSeason(ChangeEventArgs e)
    {
        int seasonId = Convert.ToInt32(e.Value);

        UpdateSeason(seasonId);
    }

    private async void UpdateSeason(int id)
    {
        var gamesResult = await matchService.GetMatches(id, Id);
        if (gamesResult.Success)
        {
            Games = gamesResult.Data!;
        }
        StateHasChanged();
    }

    public async Task<List<SeasonDto>> GetSeasons()
    {

        var seasonResponse = await teamService.GetSeasons();

        if (seasonResponse.Success)
        {
            return seasonResponse.Data!;
        }
        else
        {
            ErrorMessage = seasonResponse.Message;
            return new List<SeasonDto>();
        }

    }
}
